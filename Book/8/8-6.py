n = int(input())
k = list(map(int, input().split()))
dp = [0] * 100

dp[0] = k[0]
dp[1] = max(k[0], k[1])
#최적 부분 구조(Optimal substructure)에 대한 이해 부족
#d[i] 값은 i번째 집을 턴다고 할때의 최적의 해를 말한다.
#i번째 집을 턴다고 가정했을 때 i-1의 집은 털지 못한다.(이건 이해)
#그런데 왜 "i-1번째 집을 털었을 때의 최적의 해(dp[i-1])"와 "i-2번째 집을 털었을 때의 최적의 해를 i번째 집의 해를 더한 값(dp[i-2]+k[i])"을 비교하는지 이해가 되지 않는다.
#그리고 "i-2번째 집을 털었의 때의 최적의 해(dp[i-2])"를 "i번째 집의 해(k[i])"와 왜 더하는지도 이해가 안된다.
for i in range(2, n):
    dp[i] = max(dp[i-1], dp[i-2]+k[i])

print(dp[n-1])